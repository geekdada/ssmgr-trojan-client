// @generated by protobuf-ts 2.2.2
// @generated from protobuf file "api.proto" (package "trojan.api", syntax proto3)
// tslint:disable
import { TrojanServerService } from "./api";
import type { SetUsersResponse } from "./api";
import type { SetUsersRequest } from "./api";
import type { GetUsersResponse } from "./api";
import type { GetUsersRequest } from "./api";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ListUsersResponse } from "./api";
import type { ListUsersRequest } from "./api";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TrojanClientService } from "./api";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetTrafficResponse } from "./api";
import type { GetTrafficRequest } from "./api";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service trojan.api.TrojanClientService
 */
export interface ITrojanClientServiceClient {
    /**
     * @generated from protobuf rpc: GetTraffic(trojan.api.GetTrafficRequest) returns (trojan.api.GetTrafficResponse);
     */
    getTraffic(input: GetTrafficRequest, options?: RpcOptions): UnaryCall<GetTrafficRequest, GetTrafficResponse>;
}
/**
 * @generated from protobuf service trojan.api.TrojanClientService
 */
export class TrojanClientServiceClient implements ITrojanClientServiceClient, ServiceInfo {
    typeName = TrojanClientService.typeName;
    methods = TrojanClientService.methods;
    options = TrojanClientService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetTraffic(trojan.api.GetTrafficRequest) returns (trojan.api.GetTrafficResponse);
     */
    getTraffic(input: GetTrafficRequest, options?: RpcOptions): UnaryCall<GetTrafficRequest, GetTrafficResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTrafficRequest, GetTrafficResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service trojan.api.TrojanServerService
 */
export interface ITrojanServerServiceClient {
    /**
     * list all users
     *
     * @generated from protobuf rpc: ListUsers(trojan.api.ListUsersRequest) returns (stream trojan.api.ListUsersResponse);
     */
    listUsers(input: ListUsersRequest, options?: RpcOptions): ServerStreamingCall<ListUsersRequest, ListUsersResponse>;
    /**
     * obtain specified user's info
     *
     * @generated from protobuf rpc: GetUsers(stream trojan.api.GetUsersRequest) returns (stream trojan.api.GetUsersResponse);
     */
    getUsers(options?: RpcOptions): DuplexStreamingCall<GetUsersRequest, GetUsersResponse>;
    /**
     * setup existing users' config
     *
     * @generated from protobuf rpc: SetUsers(stream trojan.api.SetUsersRequest) returns (stream trojan.api.SetUsersResponse);
     */
    setUsers(options?: RpcOptions): DuplexStreamingCall<SetUsersRequest, SetUsersResponse>;
}
/**
 * @generated from protobuf service trojan.api.TrojanServerService
 */
export class TrojanServerServiceClient implements ITrojanServerServiceClient, ServiceInfo {
    typeName = TrojanServerService.typeName;
    methods = TrojanServerService.methods;
    options = TrojanServerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * list all users
     *
     * @generated from protobuf rpc: ListUsers(trojan.api.ListUsersRequest) returns (stream trojan.api.ListUsersResponse);
     */
    listUsers(input: ListUsersRequest, options?: RpcOptions): ServerStreamingCall<ListUsersRequest, ListUsersResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListUsersRequest, ListUsersResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * obtain specified user's info
     *
     * @generated from protobuf rpc: GetUsers(stream trojan.api.GetUsersRequest) returns (stream trojan.api.GetUsersResponse);
     */
    getUsers(options?: RpcOptions): DuplexStreamingCall<GetUsersRequest, GetUsersResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUsersRequest, GetUsersResponse>("duplex", this._transport, method, opt);
    }
    /**
     * setup existing users' config
     *
     * @generated from protobuf rpc: SetUsers(stream trojan.api.SetUsersRequest) returns (stream trojan.api.SetUsersResponse);
     */
    setUsers(options?: RpcOptions): DuplexStreamingCall<SetUsersRequest, SetUsersResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetUsersRequest, SetUsersResponse>("duplex", this._transport, method, opt);
    }
}
