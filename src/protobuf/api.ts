// @generated by protobuf-ts 2.2.2
// @generated from protobuf file "api.proto" (package "trojan.api", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message trojan.api.Traffic
 */
export interface Traffic {
    /**
     * @generated from protobuf field: uint64 upload_traffic = 1;
     */
    uploadTraffic: bigint;
    /**
     * @generated from protobuf field: uint64 download_traffic = 2;
     */
    downloadTraffic: bigint;
}
/**
 * @generated from protobuf message trojan.api.Speed
 */
export interface Speed {
    /**
     * @generated from protobuf field: uint64 upload_speed = 1;
     */
    uploadSpeed: bigint;
    /**
     * @generated from protobuf field: uint64 download_speed = 2;
     */
    downloadSpeed: bigint;
}
/**
 * @generated from protobuf message trojan.api.User
 */
export interface User {
    /**
     * @generated from protobuf field: string password = 1;
     */
    password: string;
    /**
     * @generated from protobuf field: string hash = 2;
     */
    hash: string;
}
/**
 * @generated from protobuf message trojan.api.UserStatus
 */
export interface UserStatus {
    /**
     * @generated from protobuf field: trojan.api.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: trojan.api.Traffic traffic_total = 2;
     */
    trafficTotal?: Traffic;
    /**
     * @generated from protobuf field: trojan.api.Speed speed_current = 3;
     */
    speedCurrent?: Speed;
    /**
     * @generated from protobuf field: trojan.api.Speed speed_limit = 4;
     */
    speedLimit?: Speed;
    /**
     * @generated from protobuf field: int32 ip_current = 5;
     */
    ipCurrent: number;
    /**
     * @generated from protobuf field: int32 ip_limit = 6;
     */
    ipLimit: number;
}
/**
 * @generated from protobuf message trojan.api.GetTrafficRequest
 */
export interface GetTrafficRequest {
    /**
     * @generated from protobuf field: trojan.api.User user = 1;
     */
    user?: User;
}
/**
 * @generated from protobuf message trojan.api.GetTrafficResponse
 */
export interface GetTrafficResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string info = 2;
     */
    info: string;
    /**
     * @generated from protobuf field: trojan.api.Traffic traffic_total = 3;
     */
    trafficTotal?: Traffic;
    /**
     * @generated from protobuf field: trojan.api.Speed speed_current = 4;
     */
    speedCurrent?: Speed;
}
/**
 * @generated from protobuf message trojan.api.ListUsersRequest
 */
export interface ListUsersRequest {
}
/**
 * @generated from protobuf message trojan.api.ListUsersResponse
 */
export interface ListUsersResponse {
    /**
     * @generated from protobuf field: trojan.api.UserStatus status = 1;
     */
    status?: UserStatus;
}
/**
 * @generated from protobuf message trojan.api.GetUsersRequest
 */
export interface GetUsersRequest {
    /**
     * @generated from protobuf field: trojan.api.User user = 1;
     */
    user?: User;
}
/**
 * @generated from protobuf message trojan.api.GetUsersResponse
 */
export interface GetUsersResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string info = 2;
     */
    info: string;
    /**
     * @generated from protobuf field: trojan.api.UserStatus status = 3;
     */
    status?: UserStatus;
}
/**
 * @generated from protobuf message trojan.api.SetUsersRequest
 */
export interface SetUsersRequest {
    /**
     * @generated from protobuf field: trojan.api.UserStatus status = 1;
     */
    status?: UserStatus;
    /**
     * @generated from protobuf field: trojan.api.SetUsersRequest.Operation operation = 2;
     */
    operation: SetUsersRequest_Operation;
}
/**
 * @generated from protobuf enum trojan.api.SetUsersRequest.Operation
 */
export enum SetUsersRequest_Operation {
    /**
     * @generated from protobuf enum value: Add = 0;
     */
    Add = 0,
    /**
     * @generated from protobuf enum value: Delete = 1;
     */
    Delete = 1,
    /**
     * @generated from protobuf enum value: Modify = 2;
     */
    Modify = 2
}
/**
 * @generated from protobuf message trojan.api.SetUsersResponse
 */
export interface SetUsersResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string info = 2;
     */
    info: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Traffic$Type extends MessageType<Traffic> {
    constructor() {
        super("trojan.api.Traffic", [
            { no: 1, name: "upload_traffic", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "download_traffic", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Traffic>): Traffic {
        const message = { uploadTraffic: 0n, downloadTraffic: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Traffic>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Traffic): Traffic {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 upload_traffic */ 1:
                    message.uploadTraffic = reader.uint64().toBigInt();
                    break;
                case /* uint64 download_traffic */ 2:
                    message.downloadTraffic = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Traffic, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 upload_traffic = 1; */
        if (message.uploadTraffic !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.uploadTraffic);
        /* uint64 download_traffic = 2; */
        if (message.downloadTraffic !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.downloadTraffic);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trojan.api.Traffic
 */
export const Traffic = new Traffic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Speed$Type extends MessageType<Speed> {
    constructor() {
        super("trojan.api.Speed", [
            { no: 1, name: "upload_speed", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "download_speed", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Speed>): Speed {
        const message = { uploadSpeed: 0n, downloadSpeed: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Speed>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Speed): Speed {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 upload_speed */ 1:
                    message.uploadSpeed = reader.uint64().toBigInt();
                    break;
                case /* uint64 download_speed */ 2:
                    message.downloadSpeed = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Speed, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 upload_speed = 1; */
        if (message.uploadSpeed !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.uploadSpeed);
        /* uint64 download_speed = 2; */
        if (message.downloadSpeed !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.downloadSpeed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trojan.api.Speed
 */
export const Speed = new Speed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("trojan.api.User", [
            { no: 1, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<User>): User {
        const message = { password: "", hash: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string password */ 1:
                    message.password = reader.string();
                    break;
                case /* string hash */ 2:
                    message.hash = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string password = 1; */
        if (message.password !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.password);
        /* string hash = 2; */
        if (message.hash !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.hash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trojan.api.User
 */
export const User = new User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserStatus$Type extends MessageType<UserStatus> {
    constructor() {
        super("trojan.api.UserStatus", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "traffic_total", kind: "message", T: () => Traffic },
            { no: 3, name: "speed_current", kind: "message", T: () => Speed },
            { no: 4, name: "speed_limit", kind: "message", T: () => Speed },
            { no: 5, name: "ip_current", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "ip_limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UserStatus>): UserStatus {
        const message = { ipCurrent: 0, ipLimit: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserStatus): UserStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* trojan.api.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* trojan.api.Traffic traffic_total */ 2:
                    message.trafficTotal = Traffic.internalBinaryRead(reader, reader.uint32(), options, message.trafficTotal);
                    break;
                case /* trojan.api.Speed speed_current */ 3:
                    message.speedCurrent = Speed.internalBinaryRead(reader, reader.uint32(), options, message.speedCurrent);
                    break;
                case /* trojan.api.Speed speed_limit */ 4:
                    message.speedLimit = Speed.internalBinaryRead(reader, reader.uint32(), options, message.speedLimit);
                    break;
                case /* int32 ip_current */ 5:
                    message.ipCurrent = reader.int32();
                    break;
                case /* int32 ip_limit */ 6:
                    message.ipLimit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* trojan.api.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* trojan.api.Traffic traffic_total = 2; */
        if (message.trafficTotal)
            Traffic.internalBinaryWrite(message.trafficTotal, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* trojan.api.Speed speed_current = 3; */
        if (message.speedCurrent)
            Speed.internalBinaryWrite(message.speedCurrent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* trojan.api.Speed speed_limit = 4; */
        if (message.speedLimit)
            Speed.internalBinaryWrite(message.speedLimit, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 ip_current = 5; */
        if (message.ipCurrent !== 0)
            writer.tag(5, WireType.Varint).int32(message.ipCurrent);
        /* int32 ip_limit = 6; */
        if (message.ipLimit !== 0)
            writer.tag(6, WireType.Varint).int32(message.ipLimit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trojan.api.UserStatus
 */
export const UserStatus = new UserStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTrafficRequest$Type extends MessageType<GetTrafficRequest> {
    constructor() {
        super("trojan.api.GetTrafficRequest", [
            { no: 1, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<GetTrafficRequest>): GetTrafficRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetTrafficRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTrafficRequest): GetTrafficRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* trojan.api.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTrafficRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* trojan.api.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trojan.api.GetTrafficRequest
 */
export const GetTrafficRequest = new GetTrafficRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTrafficResponse$Type extends MessageType<GetTrafficResponse> {
    constructor() {
        super("trojan.api.GetTrafficResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "traffic_total", kind: "message", T: () => Traffic },
            { no: 4, name: "speed_current", kind: "message", T: () => Speed }
        ]);
    }
    create(value?: PartialMessage<GetTrafficResponse>): GetTrafficResponse {
        const message = { success: false, info: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetTrafficResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTrafficResponse): GetTrafficResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string info */ 2:
                    message.info = reader.string();
                    break;
                case /* trojan.api.Traffic traffic_total */ 3:
                    message.trafficTotal = Traffic.internalBinaryRead(reader, reader.uint32(), options, message.trafficTotal);
                    break;
                case /* trojan.api.Speed speed_current */ 4:
                    message.speedCurrent = Speed.internalBinaryRead(reader, reader.uint32(), options, message.speedCurrent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTrafficResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string info = 2; */
        if (message.info !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.info);
        /* trojan.api.Traffic traffic_total = 3; */
        if (message.trafficTotal)
            Traffic.internalBinaryWrite(message.trafficTotal, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* trojan.api.Speed speed_current = 4; */
        if (message.speedCurrent)
            Speed.internalBinaryWrite(message.speedCurrent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trojan.api.GetTrafficResponse
 */
export const GetTrafficResponse = new GetTrafficResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUsersRequest$Type extends MessageType<ListUsersRequest> {
    constructor() {
        super("trojan.api.ListUsersRequest", []);
    }
    create(value?: PartialMessage<ListUsersRequest>): ListUsersRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListUsersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUsersRequest): ListUsersRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListUsersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trojan.api.ListUsersRequest
 */
export const ListUsersRequest = new ListUsersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUsersResponse$Type extends MessageType<ListUsersResponse> {
    constructor() {
        super("trojan.api.ListUsersResponse", [
            { no: 1, name: "status", kind: "message", T: () => UserStatus }
        ]);
    }
    create(value?: PartialMessage<ListUsersResponse>): ListUsersResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListUsersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUsersResponse): ListUsersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* trojan.api.UserStatus status */ 1:
                    message.status = UserStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUsersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* trojan.api.UserStatus status = 1; */
        if (message.status)
            UserStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trojan.api.ListUsersResponse
 */
export const ListUsersResponse = new ListUsersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUsersRequest$Type extends MessageType<GetUsersRequest> {
    constructor() {
        super("trojan.api.GetUsersRequest", [
            { no: 1, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<GetUsersRequest>): GetUsersRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUsersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUsersRequest): GetUsersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* trojan.api.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUsersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* trojan.api.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trojan.api.GetUsersRequest
 */
export const GetUsersRequest = new GetUsersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUsersResponse$Type extends MessageType<GetUsersResponse> {
    constructor() {
        super("trojan.api.GetUsersResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "message", T: () => UserStatus }
        ]);
    }
    create(value?: PartialMessage<GetUsersResponse>): GetUsersResponse {
        const message = { success: false, info: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUsersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUsersResponse): GetUsersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string info */ 2:
                    message.info = reader.string();
                    break;
                case /* trojan.api.UserStatus status */ 3:
                    message.status = UserStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUsersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string info = 2; */
        if (message.info !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.info);
        /* trojan.api.UserStatus status = 3; */
        if (message.status)
            UserStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trojan.api.GetUsersResponse
 */
export const GetUsersResponse = new GetUsersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetUsersRequest$Type extends MessageType<SetUsersRequest> {
    constructor() {
        super("trojan.api.SetUsersRequest", [
            { no: 1, name: "status", kind: "message", T: () => UserStatus },
            { no: 2, name: "operation", kind: "enum", T: () => ["trojan.api.SetUsersRequest.Operation", SetUsersRequest_Operation] }
        ]);
    }
    create(value?: PartialMessage<SetUsersRequest>): SetUsersRequest {
        const message = { operation: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetUsersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetUsersRequest): SetUsersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* trojan.api.UserStatus status */ 1:
                    message.status = UserStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* trojan.api.SetUsersRequest.Operation operation */ 2:
                    message.operation = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetUsersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* trojan.api.UserStatus status = 1; */
        if (message.status)
            UserStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* trojan.api.SetUsersRequest.Operation operation = 2; */
        if (message.operation !== 0)
            writer.tag(2, WireType.Varint).int32(message.operation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trojan.api.SetUsersRequest
 */
export const SetUsersRequest = new SetUsersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetUsersResponse$Type extends MessageType<SetUsersResponse> {
    constructor() {
        super("trojan.api.SetUsersResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetUsersResponse>): SetUsersResponse {
        const message = { success: false, info: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetUsersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetUsersResponse): SetUsersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string info */ 2:
                    message.info = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetUsersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string info = 2; */
        if (message.info !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.info);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message trojan.api.SetUsersResponse
 */
export const SetUsersResponse = new SetUsersResponse$Type();
/**
 * @generated ServiceType for protobuf service trojan.api.TrojanClientService
 */
export const TrojanClientService = new ServiceType("trojan.api.TrojanClientService", [
    { name: "GetTraffic", options: {}, I: GetTrafficRequest, O: GetTrafficResponse }
]);
/**
 * @generated ServiceType for protobuf service trojan.api.TrojanServerService
 */
export const TrojanServerService = new ServiceType("trojan.api.TrojanServerService", [
    { name: "ListUsers", serverStreaming: true, options: {}, I: ListUsersRequest, O: ListUsersResponse },
    { name: "GetUsers", serverStreaming: true, clientStreaming: true, options: {}, I: GetUsersRequest, O: GetUsersResponse },
    { name: "SetUsers", serverStreaming: true, clientStreaming: true, options: {}, I: SetUsersRequest, O: SetUsersResponse }
]);
